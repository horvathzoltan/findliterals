Egy könyvtárból kiindulva fellistázni rekurzívan a tartalmazott forrásokat
a. qdir tudja-e az összes tartalmazott fájt?
b. qdir tud-e fájlszűrőt? a .cs ok, de a .Designer.cs, stb... nem.
tipikusan csak az általunk írt osztály magyarítandó, a rendszer által adott nem.
a forrásfájlokat meg kell nyitni és kinyerni a literális stringeket, ahol releváns adat
a. a feltalálás helye
b. a konstans értéke, azaz maga a szöveg
c. adni kell neki wordcodeot

A programban (esetünkben mestercipő) a fordítás kulcs-érték párral működik, akol a kulcs elsősorban egy enum, az érték a default nyelven a default fordítás (esetünkben az angol)
 public enum tre
#pragma warning restore IDE1006 // Naming Styles
  {
    DEFAULT,
    COMMON_ERROR, OK, test1,
...

public static class TranslationService
  {

    public static string CurrentCulture { get; private set; }
    public const string DefaultLanguage = "en-US";
    private const string DefaultLanguageName = "English(US)";


    //public const string ERROR = nameof(ERROR);

    private static Dictionary<tre, string> defaultmap = new Dictionary<tre, string>()
    {
      {tre.COMMON_ERROR, "error"},
      {tre.OK, "ok"},
      {tre.test1, "test1"},
      {tre.COMMON_ABOUT, "About"},
      {tre.COMMON_NEW, "New"},
      {tre.COMMON_EDIT, "Edit"},
      {tre.COMMON_COMMENTS, "Comments"},
      {tre.COMMON_NAME, "Name"}, // Name:
      {tre.COMMON_USERNAME, "Username"},
      {tre.COMMON_USER, "User"},
      {tre.COMMON_ID, "Id"},
      {tre.COMMON_PASSWD, "Password"},
...

A fordítás úgy történik, hogy az user kiválaszt egy nyelvet és az betöltődik a default merllé. Fordításkor ha a fájlok tartalmazzák a kulcshoz tartozó értéket, akkor az, ha nem, akkor a default szöveg kerül ki.


3. A találatok alapján el lehet készíteni a Message fájlokat a kívánt nyelveken.
a. kézzel meg kell csinálni és le kell fordítani.
b. ha a találat magyarul van, akkor azt a magyarba és az angolba is bele kell tenni. lefordítani akkor kell, hanem a saját nyelvébe tesszük bele.
c. ha egy szöveget a googleval lefordítva sajátmagát kapjuk vissza, akkor az eleve azon a nyelven van
4. A találatok alapján és az enum alapján ki kell találni, mely wordcodeokkal kell az enumot bővíteni, illetve a default dictionaryt bővíteni
5. A találatok alapján az eredeti forrásban a literális stringet ki kell cserélni egy olyan szintaxisra, aminek hatására a fordítás jön vissza
        a. tr(tre.BODYPOINTLISTITEM_ORIGINALBODYPOINTDETECTIONSIZE) - itt látszik, hogy nem magát a wordcodeot, hanem az enumot használjuk erre a célra - a program a fordítást

Ha mindent jól csináltunk, örülünk, Vincent.

meg kell adni az sln fájlt bemenetnek
sln:
Project.*\"(.*.csproj)\"
proj:
<Compile\s+Include.*\"([^.]*\.cs)\"

az sln fájlt tartalmazó könyvtár neve +"_ford" lesz az output könyvtár neve


****************************************

console2

sln file as input"// parancssori argumentumként -i=inputfile.valami-ként kell megadni
csv file as output"));
set if backup is needed"));

sln->proj fileok-> filelisták

filelista fájljainak átmásolása a ..._ford mappába

started
params: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse.sln
Fájl sikeresen átmásolva: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse/Helpers/CameraResolutionsHelper.cs -> /home/zoli/forditas/tök/MasterMoveAnalyse_2_ford/MasterMoveAnalyse/Helpers/CameraResolutionsHelper.cs
Fájl sikeresen átmásolva: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse/Helpers/ChartHelper.cs -> /home/zoli/forditas/tök/MasterMoveAnalyse_2_ford/MasterMoveAnalyse/Helpers/ChartHelper.cs
Fájl sikeresen átmásolva: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse/Helpers/SortableBindingList.cs -> /home/zoli/forditas/tök/MasterMoveAnalyse_2_ford/MasterMoveAnalyse/Helpers/SortableBindingList.cs
Fájl sikeresen átmásolva: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse/MServices/MovementPlayerService/ProgressState.cs -> /home/zoli/forditas/tök/MasterMoveAnalyse_2_ford/MasterMoveAnalyse/MServices/MovementPlayerService/ProgressState.cs
Fájl sikeresen átmásolva: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse/Forms/ToolStripWithClickThrough.cs -> /home/zoli/forditas/tök/MasterMoveAnalyse_2_ford/MasterMoveAnalyse/Forms/ToolStripWithClickThrough.cs
Fájl sikeresen átmásolva: /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse/Forms/BaseForm.cs -> /home/zoli/forditas/tök/MasterMoveAnalyse_2_ford/MasterMoveAnalyse/Forms/BaseForm.cs




#filename	index	length	value	wordcode
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Helpers/ChartHelper.cs	4933	19	LeftFoot_Sensor_{0}	CHART1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Helpers/ChartHelper.cs	7321	16	Right_Sensor_{0}	CHART2
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/GDPRForm.cs	213	8	GDPRForm	GDPRF1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/InsolesForm.cs	1093	11	InsolesForm	INSOL1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/LogForm.cs	503	7	LogForm	LOGFO1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/MeasurementTypesForm.cs	783	15	MeasurementType	MEASU1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/MovementPlayerForm.cs	1132	17	MovementDetection	MOVEM1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/PatiensEditorForm.cs	611	18	PatientsEditorForm	PATIE1
/home/zoli/forditas/tök/MasterMoveAnalyse_ford/MasterMoveAnalyse/Forms/Functions/PatiensEditorForm.cs	7606	11	new_patient	PATIE2


-i /home/zoli/forditas/tök/MasterMoveAnalyse_2/MasterMoveAnalyse.sln -o outfile.csv
-i /home/zoli/forditas/tök/MasterGait/MasterMove/MasterMove.Program/MasterMove.Program.csproj -o outfile.csv
-i /home/zoli/forditas/tök/MasterGait/MasterMove/MasterMove.sln -o outfile.csv
-i /home/zoli/forditas/console2/proba.cs -o outfile.csv

public string FrameButtonTooltip
{
    get
    {
        FrameButtonTooltip_ = GlobalTranslation.Translate("WC_UI_UWP_Pages.CalibrationItemControl.FrameButtonTooltip");
        switch (RectangleStatus)
        {
            case RectangleStatusEnum.Undefined:
                FrameButtonTooltip_ += $"\n{GlobalTranslation.Translate("WC_UI_UWP_Pages.{CalibrationItemControl}.RectangleStatusEnum_Current")}{GlobalTranslation.Translate("WC_UI_UWP_Pages.CalibrationItemControl.RectangleStatusEnum_Undefined")}"/*nowc*/;
                break;
            case RectangleStatusEnum.Processing:
                FrameButtonTooltip_ += $"\n{GlobalTranslation.Translate("WC_UI_UWP_Pages.CalibrationItemControl.RectangleStatusEnum_Current")}{GlobalTranslation.Translate("WC_UI_UWP_Pages.CalibrationItemControl.RectangleStatusEnum_Processing")}"/*nowc*/;"makmak"
                break;
            case RectangleStatusEnum.Defined:
                FrameButtonTooltip_ += $"\n{GlobalTranslation.Translate("WC_UI_UWP_Pages.CalibrationItemControl.RectangleStatusEnum_Current")}{GlobalTranslation.Translate("WC_UI_UWP_Pages.CalibrationItemControl.RectangleStatusEnum_Defined")}";/*nowc*/
                break;
        }
        return FrameButtonTooltip_;
    }
    set
    {

    }
}


private static string CreateToString<T>(List<PropertyInfo> properties, T instance) where T : class
     {
         var type = typeof(T);
         if (instance == null)
         {
             return type.Name;
         }

         StringBuilder strB = new StringBuilder();
         strB.Append($"{type.Name}: ");
         properties.ForEach(p =>
         {
             var value = p.GetValue(instance);
             strB.Append($"{p.Name}: {(value == null ? "null" : value.ToString())} --- ");
         });
         return strB.ToString().TrimEnd('-', ' ');
     }
